{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi-io-twitter\n\n\nThe \nsiddhi-io-twitter extension\n is an extension to \nSiddhi\n. It publishes event data from Twitter Applications in the key-value map format.\n\n\nPrerequisites\n\n\n\n\nCreate a new Twitter application in the \nTwitter Application Managemet page\n.\n\n\nOpen the application you created in step 1 and click on the \nPermissions\n tab. In this tab, select the \nRead and Write\n option.\n\n\nClick on the \nKeys and Access Tokens\n tab. Generate new access token by clicking \nCreate My Access Token\n.\n\n\nCollect following values from the \nKeys and Access Tokens\n tab.\n\n\nConsumer key\n\n\nConsumer Secret\n\n\nAccess Token\n\n\nAccess Token Secret\n\n\nUpdate the parameter values for the extension with the values you collected in the previous step.\n\n\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.8\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension with the latest \nWSO2 Stream Processor\n that is a part of the \nWSO2 Analytics\n offering, with editor, debugger and simulation support.\n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor. If you need to use an alternative version of this extension, you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.twitter\n/groupId\n\n        \nartifactId\nsiddhi-io-twitter\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ntwitter\n \n(Source)\nThe Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings. \nThe following are key values of the map of a tweet and their descriptions:\n1.  createdAt: The UTC time at which the Tweet was created.\n2.  tweetId: The integer representation for the unique identifier of the Tweet.\n3.  text: The actual UTF-8 text of the status update.\n4.  user.createdAt: The UTC date and time at which the user account was created on Twitter.\n5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet.\n6.  user.screenName: The screen name with which the user identifies himself/herself.\n7.  user.name: The name of the user (as specified by the user).\n8.  user.mail: The \nmail.id\n of the user.\n9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value.\n10. hashtags: The hashtags that have been parsed out of the Tweet.\n11. userMentions: The other Twitter users who are mentioned in the text of the Tweet.\n12. mediaUrls: The media elements uploaded with the Tweet.\n13. urls: The URLs included in the text of a Tweet.\n14. language: The language in which the Tweet is posted.\n15. source: the utility used to post the Tweet as an HTML-formatted string.\n16. isRetweet: This indicates whether the Tweet is a Retweet or not.\n17. retweetCount: The number of times the Tweet has been retweeted.\n18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null.\n19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null.\n20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null.\n22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer.\n23. place.name: A short, human-readable representation of the name of the place.\n24. place.fullName: A complete human-readable representation of the name of the place.\n25. place.country_code: A shortened country code representing the country in which the place is located.\n26. place.country: The name of the country in which the place is located.\n27. track.words: The keywords given by the user to track.\n28. polling.query: The query provided by the user.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nReport issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to the \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the following mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via\nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO Twitter"
        }, 
        {
            "location": "/#siddhi-io-twitter", 
            "text": "The  siddhi-io-twitter extension  is an extension to  Siddhi . It publishes event data from Twitter Applications in the key-value map format.", 
            "title": "Siddhi-io-twitter"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Create a new Twitter application in the  Twitter Application Managemet page .  Open the application you created in step 1 and click on the  Permissions  tab. In this tab, select the  Read and Write  option.  Click on the  Keys and Access Tokens  tab. Generate new access token by clicking  Create My Access Token .  Collect following values from the  Keys and Access Tokens  tab.  Consumer key  Consumer Secret  Access Token  Access Token Secret  Update the parameter values for the extension with the values you collected in the previous step.   Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.8 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension with the latest  WSO2 Stream Processor  that is a part of the  WSO2 Analytics  offering, with editor, debugger and simulation support.    This extension is shipped by default with WSO2 Stream Processor. If you need to use an alternative version of this extension, you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.twitter /groupId \n         artifactId siddhi-io-twitter /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "twitter   (Source) The Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings.  The following are key values of the map of a tweet and their descriptions: 1.  createdAt: The UTC time at which the Tweet was created. 2.  tweetId: The integer representation for the unique identifier of the Tweet. 3.  text: The actual UTF-8 text of the status update. 4.  user.createdAt: The UTC date and time at which the user account was created on Twitter. 5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet. 6.  user.screenName: The screen name with which the user identifies himself/herself. 7.  user.name: The name of the user (as specified by the user). 8.  user.mail: The  mail.id  of the user. 9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value. 10. hashtags: The hashtags that have been parsed out of the Tweet. 11. userMentions: The other Twitter users who are mentioned in the text of the Tweet. 12. mediaUrls: The media elements uploaded with the Tweet. 13. urls: The URLs included in the text of a Tweet. 14. language: The language in which the Tweet is posted. 15. source: the utility used to post the Tweet as an HTML-formatted string. 16. isRetweet: This indicates whether the Tweet is a Retweet or not. 17. retweetCount: The number of times the Tweet has been retweeted. 18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null. 19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null. 20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null. 22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer. 23. place.name: A short, human-readable representation of the name of the place. 24. place.fullName: A complete human-readable representation of the name of the place. 25. place.country_code: A shortened country code representing the country in which the place is located. 26. place.country: The name of the country in which the place is located. 27. track.words: The keywords given by the user to track. 28. polling.query: The query provided by the user.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to the  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the following mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings. \nThe following are key values of the map of a tweet and their descriptions:\n1.  createdAt: The UTC time at which the Tweet was created.\n2.  tweetId: The integer representation for the unique identifier of the Tweet.\n3.  text: The actual UTF-8 text of the status update.\n4.  user.createdAt: The UTC date and time at which the user account was created on Twitter.\n5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet.\n6.  user.screenName: The screen name with which the user identifies himself/herself.\n7.  user.name: The name of the user (as specified by the user).\n8.  user.mail: The \nmail.id\n of the user.\n9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value.\n10. hashtags: The hashtags that have been parsed out of the Tweet.\n11. userMentions: The other Twitter users who are mentioned in the text of the Tweet.\n12. mediaUrls: The media elements uploaded with the Tweet.\n13. urls: The URLs included in the text of a Tweet.\n14. language: The language in which the Tweet is posted.\n15. source: the utility used to post the Tweet as an HTML-formatted string.\n16. isRetweet: This indicates whether the Tweet is a Retweet or not.\n17. retweetCount: The number of times the Tweet has been retweeted.\n18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null.\n19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null.\n20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null.\n22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer.\n23. place.name: A short, human-readable representation of the name of the place.\n24. place.fullName: A complete human-readable representation of the name of the place.\n25. place.country_code: A shortened country code representing the country in which the place is located.\n26. place.country: The name of the country in which the place is located.\n27. track.words: The keywords given by the user to track.\n28. polling.query: The query provided by the user.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nThe API key to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nThe API secret to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nThe access token to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nThe access token secret to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThe mode in which the Twitter application is run. Possible values are as follows: \nstreaming\n: This retrieves real time tweets. \n2\npolling\n: This retrieves historical tweets that were posted within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nThis is assigned to Tweets based on the level of engagement. The filter level can be \nnone\n, \nlow\n, or \nmedium\n. The highest level (i.e., \nmedium\n) corresponds loosely with the \ntop tweets\n filter that the service already offers in its on-site search function.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nThis filters the Tweets that include the specified keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nThis filters the Tweets that are tweeted by the specified user IDs.\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nThis filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g., \n51.683979:0.278970\n.\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nThis filters Tweets that are posted in the specified language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThis filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators. \ne.g., '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nThis returns a specified number of Tweets per page up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nThis returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the \nlatitude,longitude,radius\n format where theradius units must be specified as either \nmi\n (miles) or \nkm\n (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nThis parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:\n \nmixed\n: This includes both popular and recent results in the response.\n \nrecent\n: This includes only the most recent results in the response.\n* \npopular\n: This includes only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nThis returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nThis returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nThis returns Tweets that were created before the given date. Date needs to be formatted as \nYYYY-MM-DD\n. The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThis specifies a time interval (in seconds) to poll the Tweets periodically.\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to a random sample of public statuses and passes the events to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that include the keywords \nAmazon\n, \ngoogle\n, or \napple\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that either include the keywords \nAmazon\n, \ngoogle\n, \napple\n, tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling Tweets that contain the exact phrase \nhappy hour\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling tweets that contain the \n#Amazon\n hashtag and have a Tweet Id that is greater than \nsince.id\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling the recent Tweets in English that mention \nNASA\n, and have Tweet IDs that are greater than the \nsince.id\n and less than the \nmax.id\n. Then these events are passed to the \nrcvEvents\n stream.", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.8/#twitter-source", 
            "text": "The Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings.  The following are key values of the map of a tweet and their descriptions: 1.  createdAt: The UTC time at which the Tweet was created. 2.  tweetId: The integer representation for the unique identifier of the Tweet. 3.  text: The actual UTF-8 text of the status update. 4.  user.createdAt: The UTC date and time at which the user account was created on Twitter. 5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet. 6.  user.screenName: The screen name with which the user identifies himself/herself. 7.  user.name: The name of the user (as specified by the user). 8.  user.mail: The  mail.id  of the user. 9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value. 10. hashtags: The hashtags that have been parsed out of the Tweet. 11. userMentions: The other Twitter users who are mentioned in the text of the Tweet. 12. mediaUrls: The media elements uploaded with the Tweet. 13. urls: The URLs included in the text of a Tweet. 14. language: The language in which the Tweet is posted. 15. source: the utility used to post the Tweet as an HTML-formatted string. 16. isRetweet: This indicates whether the Tweet is a Retweet or not. 17. retweetCount: The number of times the Tweet has been retweeted. 18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null. 19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null. 20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null. 22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer. 23. place.name: A short, human-readable representation of the name of the place. 24. place.fullName: A complete human-readable representation of the name of the place. 25. place.country_code: A shortened country code representing the country in which the place is located. 26. place.country: The name of the country in which the place is located. 27. track.words: The keywords given by the user to track. 28. polling.query: The query provided by the user.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         The API key to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         The API secret to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         The access token to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         The access token secret to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         The mode in which the Twitter application is run. Possible values are as follows:  streaming : This retrieves real time tweets.  2 polling : This retrieves historical tweets that were posted within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         This is assigned to Tweets based on the level of engagement. The filter level can be  none ,  low , or  medium . The highest level (i.e.,  medium ) corresponds loosely with the  top tweets  filter that the service already offers in its on-site search function. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         This filters the Tweets that include the specified keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         This filters the Tweets that are tweeted by the specified user IDs. \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         This filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g.,  51.683979:0.278970 . \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         This filters Tweets that are posted in the specified language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         This filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators.  e.g., '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         This returns a specified number of Tweets per page up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         This returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the  latitude,longitude,radius  format where theradius units must be specified as either  mi  (miles) or  km  (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         This parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:   mixed : This includes both popular and recent results in the response.   recent : This includes only the most recent results in the response. *  popular : This includes only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         This returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         This returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         This returns Tweets that were created before the given date. Date needs to be formatted as  YYYY-MM-DD . The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         This specifies a time interval (in seconds) to poll the Tweets periodically. \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to a random sample of public statuses and passes the events to the  rcvEvents  stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that include the keywords  Amazon ,  google , or  apple . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that either include the keywords  Amazon ,  google ,  apple , tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling Tweets that contain the exact phrase  happy hour . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling tweets that contain the  #Amazon  hashtag and have a Tweet Id that is greater than  since.id . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling the recent Tweets in English that mention  NASA , and have Tweet IDs that are greater than the  since.id  and less than the  max.id . Then these events are passed to the  rcvEvents  stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings. \nThe following are key values of the map of a tweet and their descriptions:\n1.  createdAt: The UTC time at which the Tweet was created.\n2.  tweetId: The integer representation for the unique identifier of the Tweet.\n3.  text: The actual UTF-8 text of the status update.\n4.  user.createdAt: The UTC date and time at which the user account was created on Twitter.\n5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet.\n6.  user.screenName: The screen name with which the user identifies himself/herself.\n7.  user.name: The name of the user (as specified by the user).\n8.  user.mail: The \nmail.id\n of the user.\n9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value.\n10. hashtags: The hashtags that have been parsed out of the Tweet.\n11. userMentions: The other Twitter users who are mentioned in the text of the Tweet.\n12. mediaUrls: The media elements uploaded with the Tweet.\n13. urls: The URLs included in the text of a Tweet.\n14. language: The language in which the Tweet is posted.\n15. source: the utility used to post the Tweet as an HTML-formatted string.\n16. isRetweet: This indicates whether the Tweet is a Retweet or not.\n17. retweetCount: The number of times the Tweet has been retweeted.\n18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null.\n19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null.\n20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null.\n22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer.\n23. place.name: A short, human-readable representation of the name of the place.\n24. place.fullName: A complete human-readable representation of the name of the place.\n25. place.country_code: A shortened country code representing the country in which the place is located.\n26. place.country: The name of the country in which the place is located.\n27. track.words: The keywords given by the user to track.\n28. polling.query: The query provided by the user.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nThe API key to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nThe API secret to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nThe access token to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nThe access token secret to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThe mode in which the Twitter application is run. Possible values are as follows: \nstreaming\n: This retrieves real time tweets. \n2\npolling\n: This retrieves historical tweets that were posted within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nThis is assigned to Tweets based on the level of engagement. The filter level can be \nnone\n, \nlow\n, or \nmedium\n. The highest level (i.e., \nmedium\n) corresponds loosely with the \ntop tweets\n filter that the service already offers in its on-site search function.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nThis filters the Tweets that include the specified keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nThis filters the Tweets that are tweeted by the specified user IDs.\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nThis filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g., \n51.683979:0.278970\n.\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nThis filters Tweets that are posted in the specified language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThis filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators. \ne.g., '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nThis returns a specified number of Tweets per page up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nThis returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the \nlatitude,longitude,radius\n format where theradius units must be specified as either \nmi\n (miles) or \nkm\n (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nThis parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:\n \nmixed\n: This includes both popular and recent results in the response.\n \nrecent\n: This includes only the most recent results in the response.\n* \npopular\n: This includes only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nThis returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nThis returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nThis returns Tweets that were created before the given date. Date needs to be formatted as \nYYYY-MM-DD\n. The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThis specifies a time interval (in seconds) to poll the Tweets periodically.\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to a random sample of public statuses and passes the events to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that include the keywords \nAmazon\n, \ngoogle\n, or \napple\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that either include the keywords \nAmazon\n, \ngoogle\n, \napple\n, tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling Tweets that contain the exact phrase \nhappy hour\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling tweets that contain the \n#Amazon\n hashtag and have a Tweet Id that is greater than \nsince.id\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling the recent Tweets in English that mention \nNASA\n, and have Tweet IDs that are greater than the \nsince.id\n and less than the \nmax.id\n. Then these events are passed to the \nrcvEvents\n stream.", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.7/#twitter-source", 
            "text": "The Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings.  The following are key values of the map of a tweet and their descriptions: 1.  createdAt: The UTC time at which the Tweet was created. 2.  tweetId: The integer representation for the unique identifier of the Tweet. 3.  text: The actual UTF-8 text of the status update. 4.  user.createdAt: The UTC date and time at which the user account was created on Twitter. 5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet. 6.  user.screenName: The screen name with which the user identifies himself/herself. 7.  user.name: The name of the user (as specified by the user). 8.  user.mail: The  mail.id  of the user. 9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value. 10. hashtags: The hashtags that have been parsed out of the Tweet. 11. userMentions: The other Twitter users who are mentioned in the text of the Tweet. 12. mediaUrls: The media elements uploaded with the Tweet. 13. urls: The URLs included in the text of a Tweet. 14. language: The language in which the Tweet is posted. 15. source: the utility used to post the Tweet as an HTML-formatted string. 16. isRetweet: This indicates whether the Tweet is a Retweet or not. 17. retweetCount: The number of times the Tweet has been retweeted. 18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null. 19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null. 20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null. 22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer. 23. place.name: A short, human-readable representation of the name of the place. 24. place.fullName: A complete human-readable representation of the name of the place. 25. place.country_code: A shortened country code representing the country in which the place is located. 26. place.country: The name of the country in which the place is located. 27. track.words: The keywords given by the user to track. 28. polling.query: The query provided by the user.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         The API key to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         The API secret to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         The access token to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         The access token secret to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         The mode in which the Twitter application is run. Possible values are as follows:  streaming : This retrieves real time tweets.  2 polling : This retrieves historical tweets that were posted within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         This is assigned to Tweets based on the level of engagement. The filter level can be  none ,  low , or  medium . The highest level (i.e.,  medium ) corresponds loosely with the  top tweets  filter that the service already offers in its on-site search function. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         This filters the Tweets that include the specified keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         This filters the Tweets that are tweeted by the specified user IDs. \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         This filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g.,  51.683979:0.278970 . \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         This filters Tweets that are posted in the specified language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         This filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators.  e.g., '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         This returns a specified number of Tweets per page up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         This returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the  latitude,longitude,radius  format where theradius units must be specified as either  mi  (miles) or  km  (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         This parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:   mixed : This includes both popular and recent results in the response.   recent : This includes only the most recent results in the response. *  popular : This includes only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         This returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         This returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         This returns Tweets that were created before the given date. Date needs to be formatted as  YYYY-MM-DD . The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         This specifies a time interval (in seconds) to poll the Tweets periodically. \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to a random sample of public statuses and passes the events to the  rcvEvents  stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that include the keywords  Amazon ,  google , or  apple . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that either include the keywords  Amazon ,  google ,  apple , tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling Tweets that contain the exact phrase  happy hour . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling tweets that contain the  #Amazon  hashtag and have a Tweet Id that is greater than  since.id . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling the recent Tweets in English that mention  NASA , and have Tweet IDs that are greater than the  since.id  and less than the  max.id . Then these events are passed to the  rcvEvents  stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. The events will be received in a key-value map. \nKey values of the map of a tweet and their descriptions.\n1.  createdAt - UTC time when this Tweet was created.\n2.  tweetId - The integer representation of the unique identifier for this Tweet.\n3.  text - The actual UTF-8 text of the status update.\n4.  user.createdAt - The UTC datetime that the user account was created on Twitter.\n5.  user.id - The integer representation of the unique identifier for this User.\n6.  user.screenName - The screen name, that this user identifies themselves with.\n7.  user.name - The name of the user, as they've defined it.\n8.  user.mail - The mail.id of the user.\n9.  user.location - Nullable. The user-defined location for this account's profile.\n10. hashtags - Represents hashtags which have been parsed out of the Tweet.\n11. userMentions - Represents other Twitter users mentioned in the text of the Tweet.\n12. mediaUrls - Represents media elements uploaded with the Tweet.\n13. urls - Represents URLs included in the text of a Tweet.\n14. language - The language inwhich tweep tweeted.\n15. source - Utility used to post the Tweet, as an HTML-formatted string\n16. isRetweet - Indicates whether this is a Retweeted Tweet.\n17. retweetCount - Number of times this Tweet has been retweeted.\n18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users.\n19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application.\n20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID.\n22. place.id - ID representing this place. This is represented as a string, not an integer.\n23. place.name - Short human-readable representation of the place's name.\n24. place.fullName - Full human-readable representation of the place's name.\n25. place.country_code - Shortened country code representing the country containing this place.\n26. place.country - Name of the country containing this place.\n27. track.words - Keywords given by the user to track.\n28. polling.query - Query given by the user.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. streaming - Retrieves real time tweets, \n2. polling - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive.Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.6/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App. The events will be received in a key-value map.  Key values of the map of a tweet and their descriptions. 1.  createdAt - UTC time when this Tweet was created. 2.  tweetId - The integer representation of the unique identifier for this Tweet. 3.  text - The actual UTF-8 text of the status update. 4.  user.createdAt - The UTC datetime that the user account was created on Twitter. 5.  user.id - The integer representation of the unique identifier for this User. 6.  user.screenName - The screen name, that this user identifies themselves with. 7.  user.name - The name of the user, as they've defined it. 8.  user.mail - The mail.id of the user. 9.  user.location - Nullable. The user-defined location for this account's profile. 10. hashtags - Represents hashtags which have been parsed out of the Tweet. 11. userMentions - Represents other Twitter users mentioned in the text of the Tweet. 12. mediaUrls - Represents media elements uploaded with the Tweet. 13. urls - Represents URLs included in the text of a Tweet. 14. language - The language inwhich tweep tweeted. 15. source - Utility used to post the Tweet, as an HTML-formatted string 16. isRetweet - Indicates whether this is a Retweeted Tweet. 17. retweetCount - Number of times this Tweet has been retweeted. 18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users. 19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application. 20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID. 22. place.id - ID representing this place. This is represented as a string, not an integer. 23. place.name - Short human-readable representation of the place's name. 24. place.fullName - Full human-readable representation of the place's name. 25. place.country_code - Shortened country code representing the country containing this place. 26. place.country - Name of the country containing this place. 27. track.words - Keywords given by the user to track. 28. polling.query - Query given by the user.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. streaming - Retrieves real time tweets,  2. polling - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive.Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. The events will be received in a key-value map. \nKey values of the map of a tweet and their descriptions.\n1.  createdAt - UTC time when this Tweet was created.\n2.  tweetId - The integer representation of the unique identifier for this Tweet.\n3.  text - The actual UTF-8 text of the status update.\n4.  user.createdAt - The UTC datetime that the user account was created on Twitter.\n5.  user.id - The integer representation of the unique identifier for this User.\n6.  user.screenName - The screen name, that this user identifies themselves with.\n7.  user.name - The name of the user, as they've defined it.\n8.  user.mail - The mail.id of the user.\n9.  user.location - Nullable. The user-defined location for this account's profile.\n10. hashtags - Represents hashtags which have been parsed out of the Tweet.\n11. userMentions - Represents other Twitter users mentioned in the text of the Tweet.\n12. mediaUrls - Represents media elements uploaded with the Tweet.\n13. urls - Represents URLs included in the text of a Tweet.\n14. language - The language inwhich tweep tweeted.\n15. source - Utility used to post the Tweet, as an HTML-formatted string\n16. isRetweet - Indicates whether this is a Retweeted Tweet.\n17. retweetCount - Number of times this Tweet has been retweeted.\n18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users.\n19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application.\n20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID.\n22. place.id - ID representing this place. This is represented as a string, not an integer.\n23. place.name - Short human-readable representation of the place's name.\n24. place.fullName - Full human-readable representation of the place's name.\n25. place.country_code - Shortened country code representing the country containing this place.\n26. place.country - Name of the country containing this place.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. streaming - Retrieves real time tweets, \n2. polling - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive.Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.5/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App. The events will be received in a key-value map.  Key values of the map of a tweet and their descriptions. 1.  createdAt - UTC time when this Tweet was created. 2.  tweetId - The integer representation of the unique identifier for this Tweet. 3.  text - The actual UTF-8 text of the status update. 4.  user.createdAt - The UTC datetime that the user account was created on Twitter. 5.  user.id - The integer representation of the unique identifier for this User. 6.  user.screenName - The screen name, that this user identifies themselves with. 7.  user.name - The name of the user, as they've defined it. 8.  user.mail - The mail.id of the user. 9.  user.location - Nullable. The user-defined location for this account's profile. 10. hashtags - Represents hashtags which have been parsed out of the Tweet. 11. userMentions - Represents other Twitter users mentioned in the text of the Tweet. 12. mediaUrls - Represents media elements uploaded with the Tweet. 13. urls - Represents URLs included in the text of a Tweet. 14. language - The language inwhich tweep tweeted. 15. source - Utility used to post the Tweet, as an HTML-formatted string 16. isRetweet - Indicates whether this is a Retweeted Tweet. 17. retweetCount - Number of times this Tweet has been retweeted. 18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users. 19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application. 20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID. 22. place.id - ID representing this place. This is represented as a string, not an integer. 23. place.name - Short human-readable representation of the place's name. 24. place.fullName - Full human-readable representation of the place's name. 25. place.country_code - Shortened country code representing the country containing this place. 26. place.country - Name of the country containing this place.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. streaming - Retrieves real time tweets,  2. polling - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive.Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. The events will be received in a key-value map. \nKey values of the map of a tweet and their descriptions.\n1.  createdAt - UTC time when this Tweet was created.\n2.  tweetId - The integer representation of the unique identifier for this Tweet.\n3.  text - The actual UTF-8 text of the status update.\n4.  user.createdAt - The UTC datetime that the user account was created on Twitter.\n5.  user.id - The integer representation of the unique identifier for this User.\n6.  user.screenName - The screen name, that this user identifies themselves with.\n7.  user.name - The name of the user, as they?ve defined it.\n8.  user.mail - The mail.id of the user.\n9.  user.location - Nullable. The user-defined location for this account?s profile.\n10. hashtags - Represents hashtags which have been parsed out of the Tweet.\n11. userMentions - Represents other Twitter users mentioned in the text of the Tweet.\n12. mediaUrls - Represents media elements uploaded with the Tweet.\n13. urls - Represents URLs included in the text of a Tweet.\n14. language - The language inwhich tweep tweeted.\n15. source - Utility used to post the Tweet, as an HTML-formatted string\n16. isRetweet - Indicates whether this is a Retweeted Tweet.\n17. retweetCount - Number of times this Tweet has been retweeted.\n18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users.\n19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application.\n20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet?s ID.\n22. place.id - ID representing this place. This is represented as a string, not an integer.\n23. place.name - Short human-readable representation of the place?s name.\n24. place.fullName - Full human-readable representation of the place?s name.\n25. place.country_code - Name of the country containing this place.\n26. place.country - Name of the country containing this place.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. streaming - Retrieves real time tweets, \n2. polling - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive.Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.4/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App. The events will be received in a key-value map.  Key values of the map of a tweet and their descriptions. 1.  createdAt - UTC time when this Tweet was created. 2.  tweetId - The integer representation of the unique identifier for this Tweet. 3.  text - The actual UTF-8 text of the status update. 4.  user.createdAt - The UTC datetime that the user account was created on Twitter. 5.  user.id - The integer representation of the unique identifier for this User. 6.  user.screenName - The screen name, that this user identifies themselves with. 7.  user.name - The name of the user, as they?ve defined it. 8.  user.mail - The mail.id of the user. 9.  user.location - Nullable. The user-defined location for this account?s profile. 10. hashtags - Represents hashtags which have been parsed out of the Tweet. 11. userMentions - Represents other Twitter users mentioned in the text of the Tweet. 12. mediaUrls - Represents media elements uploaded with the Tweet. 13. urls - Represents URLs included in the text of a Tweet. 14. language - The language inwhich tweep tweeted. 15. source - Utility used to post the Tweet, as an HTML-formatted string 16. isRetweet - Indicates whether this is a Retweeted Tweet. 17. retweetCount - Number of times this Tweet has been retweeted. 18. favouriteCount = Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users. 19. geoLocation - Nullable. Represents the geographic location of this Tweet as reported by the user or client application. 20. quotedStatusId - This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id - Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet?s ID. 22. place.id - ID representing this place. This is represented as a string, not an integer. 23. place.name - Short human-readable representation of the place?s name. 24. place.fullName - Full human-readable representation of the place?s name. 25. place.country_code - Name of the country containing this place. 26. place.country - Name of the country containing this place.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. streaming - Retrieves real time tweets,  2. polling - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the 'top tweets'filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either 'mi' (miles) or 'km' (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive.Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.3/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App.   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.2/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App.   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from an twitter API \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.1/#twitter-source", 
            "text": "The twitter source receives the events from an twitter API   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App.   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the ?top tweets? filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either ? mi ? (miles) or ? km ? (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.8\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings. \nThe following are key values of the map of a tweet and their descriptions:\n1.  createdAt: The UTC time at which the Tweet was created.\n2.  tweetId: The integer representation for the unique identifier of the Tweet.\n3.  text: The actual UTF-8 text of the status update.\n4.  user.createdAt: The UTC date and time at which the user account was created on Twitter.\n5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet.\n6.  user.screenName: The screen name with which the user identifies himself/herself.\n7.  user.name: The name of the user (as specified by the user).\n8.  user.mail: The \nmail.id\n of the user.\n9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value.\n10. hashtags: The hashtags that have been parsed out of the Tweet.\n11. userMentions: The other Twitter users who are mentioned in the text of the Tweet.\n12. mediaUrls: The media elements uploaded with the Tweet.\n13. urls: The URLs included in the text of a Tweet.\n14. language: The language in which the Tweet is posted.\n15. source: the utility used to post the Tweet as an HTML-formatted string.\n16. isRetweet: This indicates whether the Tweet is a Retweet or not.\n17. retweetCount: The number of times the Tweet has been retweeted.\n18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null.\n19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null.\n20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet.\n21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null.\n22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer.\n23. place.name: A short, human-readable representation of the name of the place.\n24. place.fullName: A complete human-readable representation of the name of the place.\n25. place.country_code: A shortened country code representing the country in which the place is located.\n26. place.country: The name of the country in which the place is located.\n27. track.words: The keywords given by the user to track.\n28. polling.query: The query provided by the user.\n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nThe API key to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nThe API secret to access the Twitter application created.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nThe access token to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nThe access token secret to be used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThe mode in which the Twitter application is run. Possible values are as follows: \nstreaming\n: This retrieves real time tweets. \n2\npolling\n: This retrieves historical tweets that were posted within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nThis is assigned to Tweets based on the level of engagement. The filter level can be \nnone\n, \nlow\n, or \nmedium\n. The highest level (i.e., \nmedium\n) corresponds loosely with the \ntop tweets\n filter that the service already offers in its on-site search function.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nThis filters the Tweets that include the specified keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nThis filters the Tweets that are tweeted by the specified user IDs.\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nThis filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g., \n51.683979:0.278970\n.\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nThis filters Tweets that are posted in the specified language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThis filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators. \ne.g., '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nThis returns a specified number of Tweets per page up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nThis returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the \nlatitude,longitude,radius\n format where theradius units must be specified as either \nmi\n (miles) or \nkm\n (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nThis parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:\n \nmixed\n: This includes both popular and recent results in the response.\n \nrecent\n: This includes only the most recent results in the response.\n* \npopular\n: This includes only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nThis returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nThis returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nThis returns Tweets that were created before the given date. Date needs to be formatted as \nYYYY-MM-DD\n. The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThis specifies a time interval (in seconds) to poll the Tweets periodically.\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to a random sample of public statuses and passes the events to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that include the keywords \nAmazon\n, \ngoogle\n, or \napple\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts listening to Tweets in English that either include the keywords \nAmazon\n, \ngoogle\n, \napple\n, tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling Tweets that contain the exact phrase \nhappy hour\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling tweets that contain the \n#Amazon\n hashtag and have a Tweet Id that is greater than \nsince.id\n. Then these Tweets are passed to the \nrcvEvents\n stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);\n\n\n\n\nIn this example, the twitter source starts polling the recent Tweets in English that mention \nNASA\n, and have Tweet IDs that are greater than the \nsince.id\n and less than the \nmax.id\n. Then these events are passed to the \nrcvEvents\n stream.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#twitter-source", 
            "text": "The Twitter source receives events from a Twitter app. The events are received in the form of key-value mappings.  The following are key values of the map of a tweet and their descriptions: 1.  createdAt: The UTC time at which the Tweet was created. 2.  tweetId: The integer representation for the unique identifier of the Tweet. 3.  text: The actual UTF-8 text of the status update. 4.  user.createdAt: The UTC date and time at which the user account was created on Twitter. 5.  user.id: The integer representation for the unique identifier of the user who posted the Tweet. 6.  user.screenName: The screen name with which the user identifies himself/herself. 7.  user.name: The name of the user (as specified by the user). 8.  user.mail: The  mail.id  of the user. 9.  user.location: The location in which the current user account profile is saved. This parameter can have a null value. 10. hashtags: The hashtags that have been parsed out of the Tweet. 11. userMentions: The other Twitter users who are mentioned in the text of the Tweet. 12. mediaUrls: The media elements uploaded with the Tweet. 13. urls: The URLs included in the text of a Tweet. 14. language: The language in which the Tweet is posted. 15. source: the utility used to post the Tweet as an HTML-formatted string. 16. isRetweet: This indicates whether the Tweet is a Retweet or not. 17. retweetCount: The number of times the Tweet has been retweeted. 18. favouriteCount: This indicates the number of times the Tweet has been liked by Twitter users. The value for this field can be null. 19. geoLocation: The geographic location from which the Tweet was posted by the user or client application. The value for this field can be null. 20. quotedStatusId: This field appears only when the Tweet is a quote Tweet. It displays the integer value Tweet ID of the quoted Tweet. 21. in.reply.to.status.id: If the Tweet is a reply to another Tweet, this field displays the integer representation of the original Tweet's ID. The value for this field can be null. 22. place.id: An ID representing the current location from which the Tweet is read. This is represented as a string and not an integer. 23. place.name: A short, human-readable representation of the name of the place. 24. place.fullName: A complete human-readable representation of the name of the place. 25. place.country_code: A shortened country code representing the country in which the place is located. 26. place.country: The name of the country in which the place is located. 27. track.words: The keywords given by the user to track. 28. polling.query: The query provided by the user.  Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         The API key to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         The API secret to access the Twitter application created. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         The access token to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         The access token secret to be used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         The mode in which the Twitter application is run. Possible values are as follows:  streaming : This retrieves real time tweets.  2 polling : This retrieves historical tweets that were posted within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         This is assigned to Tweets based on the level of engagement. The filter level can be  none ,  low , or  medium . The highest level (i.e.,  medium ) corresponds loosely with the  top tweets  filter that the service already offers in its on-site search function. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         This filters the Tweets that include the specified keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         This filters the Tweets that are tweeted by the specified user IDs. \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         This filters Tweets based on the locations. Here, you need to specify thelatitude and the longitude of the location e.g.,  51.683979:0.278970 . \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         This filters Tweets that are posted in the specified language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         This filters Tweets that match the specified UTF-8, URL-encoded search query with a maximum of 500 characters including operators.  e.g., '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         This returns a specified number of Tweets per page up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         This returns Tweets by users who are located within a specified radius of the given latitude/longitude. The location is preferentially taken from the Geotagging API, but it falls back to their Twitter profile. The parameter value is specified in the  latitude,longitude,radius  format where theradius units must be specified as either  mi  (miles) or  km  (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         This parameter allows to to specify the whether you want to receive only popular Tweets, the most recent Tweets or a mix of both.The possible values are as follows:   mixed : This includes both popular and recent results in the response.   recent : This includes only the most recent results in the response. *  popular : This includes only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         This returns Tweets of which the Tweet ID is equal to or less than (i.e., older than) the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         This returns Tweets of which the Tweet ID is greater than (i.e., more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         This returns Tweets that were created before the given date. Date needs to be formatted as  YYYY-MM-DD . The search index has a 7-day limit. Therefore, it is not possible to return Tweets that were created more than a week before the current date. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         This specifies a time interval (in seconds) to poll the Tweets periodically. \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to a random sample of public statuses and passes the events to the  rcvEvents  stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that include the keywords  Amazon ,  google , or  apple . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', filter.level = 'low', follow = '11348282,20536157,15670515,17193794,58561993,18139619',location = '51.280430:-0.563160,51.683979:0.278970', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts listening to Tweets in English that either include the keywords  Amazon ,  google ,  apple , tweeted by the specified followers, or tweeted from the given location based on the filter.level. Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling Tweets that contain the exact phrase  happy hour . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text',hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling tweets that contain the  #Amazon  hashtag and have a Tweet Id that is greater than  since.id . Then these Tweets are passed to the  rcvEvents  stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10, @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text', hashtags = 'hashtags'))) \ndefine stream inputStream(createdAt String, id long, text String, hashtags string);  In this example, the twitter source starts polling the recent Tweets in English that mention  NASA , and have Tweet IDs that are greater than the  since.id  and less than the  max.id . Then these events are passed to the  rcvEvents  stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}